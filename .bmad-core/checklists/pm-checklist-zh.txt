# 产品经理（PM）需求检查清单

此检查清单作为一个全面的框架，确保产品需求文档（PRD）和史诗定义是完整的、结构良好的，并且适合 MVP 开发。PM 应在产品定义过程中系统地完成每个项目。

[[LLM: 初始化说明 - PM 检查清单

在进行此检查清单之前，请确保您可以访问：

1. prd.md - 产品需求文档（检查 docs/prd.md）
2. 任何用户研究、市场分析或竞争分析文档
3. 业务目标和战略文档
4. 任何现有的史诗定义或用户故事

重要：如果缺少 PRD，请立即询问用户其位置或内容，然后再继续。

验证方法：

1. 以用户为中心 - 每个需求都应与用户价值相关
2. MVP 重点 - 确保范围真正最小化且可行
3. 清晰度 - 需求应明确且可测试
4. 完整性 - 产品愿景的所有方面都涵盖
5. 可行性 - 需求在技术上是可实现的

执行模式：
询问用户是否希望逐节完成检查清单：

- 逐节（互动模式） - 审查每个部分，提出发现，获得确认后再继续
- 一次性（全面模式） - 完成全面分析并在最后呈现全面报告]]

## 1. 问题定义和背景

[[LLM: 任何产品的基础都是明确的问题陈述。在审查此部分时：

1. 验证问题是真实且值得解决的
2. 检查目标受众是具体的，而不是“每个人”
3. 确保成功指标是可衡量的，而不是模糊的愿望
4. 寻找用户研究的证据，而不仅仅是假设
5. 确认问题-解决方案的契合是合乎逻辑的]]

### 1.1 问题陈述

- [ ] 清晰阐述所解决的问题
- [ ] 确定谁遇到了问题
- [ ] 解释为什么解决这个问题很重要
- [ ] 量化问题的影响（如果可能）
- [ ] 与现有解决方案的差异化

### 1.2 业务目标和成功指标

- [ ] 定义具体、可衡量的业务目标
- [ ] 建立明确的成功指标和 KPI
- [ ] 指标与用户和业务价值相关
- [ ] 确定基线测量（如果适用）
- [ ] 指定实现目标的时间框架

### 1.3 用户研究和见解

- [ ] 明确定义目标用户角色
- [ ] 记录用户需求和痛点
- [ ] 总结用户研究结果（如果有）
- [ ] 包括竞争分析
- [ ] 提供市场背景

## 2. MVP 范围定义

[[LLM: MVP 范围至关重要 - 太多会浪费资源，太少则无法验证。检查：

1. 这是否真正最小化？挑战每个功能
2. 每个功能是否直接解决核心问题？
3. “可有可无”是否与“必须有”明确分开？
4. 是否记录了包含/排除的理由？
5. 您能在目标时间内交付吗？]]

### 2.1 核心功能

- [ ] 明确区分基本功能与可有可无
- [ ] 功能直接解决定义的问题陈述
- [ ] 每个史诗与特定用户需求相关
- [ ] 从用户角度描述功能和故事
- [ ] 定义成功的最低要求

### 2.2 范围边界

- [ ] 明确阐述不在范围内的内容
- [ ] 包括未来增强部分
- [ ] 记录范围决策的理由
- [ ] MVP 在最大化学习的同时最小化功能
- [ ] 范围已多次审查和完善

### 2.3 MVP 验证方法

- [ ] 定义测试 MVP 成功的方法
- [ ] 计划初步用户反馈机制
- [ ] 指定超越 MVP 的标准
- [ ] 阐明 MVP 的学习目标
- [ ] 设置时间预期

## 3. 用户体验需求

[[LLM: UX 需求桥接用户需求和技术实施。验证：

1. 用户流程完全涵盖主要用例
2. 边缘情况已识别（即使推迟）
3. 无障碍性不是事后考虑
4. 性能期望是现实的
5. 计划错误状态和恢复]]

### 3.1 用户旅程和流程

- [ ] 记录主要用户流程
- [ ] 确定每个流程的入口和出口点
- [ ] 映射决策点和分支
- [ ] 突出显示关键路径
- [ ] 考虑边缘情况

### 3.2 可用性需求

- [ ] 记录无障碍性考虑
- [ ] 指定平台/设备兼容性
- [ ] 从用户角度定义性能期望
- [ ] 概述错误处理和恢复方法
- [ ] 确定用户反馈机制

### 3.3 UI 需求

- [ ] 概述信息架构
- [ ] 确定关键 UI 组件
- [ ] 参考视觉设计指南（如果适用）
- [ ] 指定内容需求
- [ ] 定义高层次导航结构

## 4. 功能需求

[[LLM: 功能需求必须足够明确以便实施。检查：

1. 需求关注“是什么”而不是“如何”（无实施细节）
2. 每个需求都是可测试的（QA 如何验证？）
3. 依赖关系是明确的（需要先构建什么？）
4. 需求使用一致的术语
5. 复杂功能分解为可管理的部分]]

### 4.1 功能完整性

- [ ] 记录 MVP 所需的所有功能
- [ ] 功能具有明确的用户导向描述
- [ ] 指出功能的优先级/重要性
- [ ] 需求是可测试和可验证的
- [ ] 确定功能之间的依赖关系

### 4.2 需求质量

- [ ] 需求是具体且明确的
- [ ] 需求关注“是什么”而不是“如何”
- [ ] 需求使用一致的术语
- [ ] 复杂需求分解为更简单的部分
- [ ] 最小化或解释技术术语

### 4.3 用户故事和验收标准

- [ ] 故事遵循一致的格式
- [ ] 验收标准是可测试的
- [ ] 故事大小适中（不太大）
- [ ] 故事尽可能独立
- [ ] 故事包含必要的上下文
- [ ] 在相关的后端/数据故事的 AC 中定义本地可测试性要求（例如，通过 CLI）

## 5. 非功能需求

### 5.1 性能需求

- [ ] 定义响应时间期望
- [ ] 指定吞吐量/容量需求
- [ ] 记录可扩展性需求
- [ ] 确定资源利用率约束
- [ ] 设置负载处理期望

### 5.2 安全和合规

- [ ] 指定数据保护需求
- [ ] 定义身份验证/授权需求
- [ ] 记录合规需求
- [ ] 概述安全测试需求
- [ ] 解决隐私考虑

### 5.3 可靠性和弹性

- [ ] 定义可用性需求
- [ ] 记录备份和恢复需求
- [ ] 设置容错期望
- [ ] 指定错误处理需求
- [ ] 包括维护和支持考虑

### 5.4 技术约束

- [ ] 记录平台/技术约束
- [ ] 概述集成需求
- [ ] 确定第三方服务依赖
- [ ] 指定基础设施需求
- [ ] 确定开发环境需求

## 6. 史诗和故事结构

### 6.1 史诗定义

- [ ] 史诗代表连贯的功能单元
- [ ] 史诗专注于用户/业务价值交付
- [ ] 明确阐述史诗目标
- [ ] 史诗大小适中，适合增量交付
- [ ] 确定史诗顺序和依赖关系

### 6.2 故事分解

- [ ] 故事分解为适当大小
- [ ] 故事具有明确的独立价值
- [ ] 故事包含适当的验收标准
- [ ] 记录故事依赖关系和顺序
- [ ] 故事与史诗目标一致

### 6.3 第一个史诗的完整性

- [ ] 第一个史诗包括所有必要的设置步骤
- [ ] 解决项目脚手架和初始化
- [ ] 包括核心基础设施设置
- [ ] 解决开发环境设置
- [ ] 早期建立本地可测试性

## 7. 技术指导

### 7.1 架构指导

- [ ] 提供初步架构方向
- [ ] 明确传达技术约束
- [ ] 确定集成点
- [ ] 突出性能考虑
- [ ] 阐明安全需求
- [ ] 标记需要架构深入研究的已知高复杂性或技术风险区域

### 7.2 技术决策框架

- [ ] 提供技术选择的决策标准
- [ ] 阐明关键决策的权衡
- [ ] 记录选择主要方法而非考虑的替代方案的理由（对于关键设计/功能选择）
- [ ] 突出不可协商的技术需求
- [ ] 确定需要技术调查的区域
- [ ] 提供技术债务方法的指导

### 7.3 实施考虑

- [ ] 提供开发方法指导
- [ ] 阐明测试需求
- [ ] 设置部署期望
- [ ] 确定监控需求
- [ ] 指定文档需求

## 8. 跨职能需求

### 8.1 数据需求

- [ ] 确定数据实体和关系
- [ ] 指定数据存储需求
- [ ] 定义数据质量需求
- [ ] 确定数据保留政策
- [ ] 解决数据迁移需求（如果适用）
- [ ] 计划迭代的模式更改，与需要它们的故事相关联

### 8.2 集成需求

- [ ] 确定外部系统集成
- [ ] 记录 API 需求
- [ ] 指定集成的身份验证
- [ ] 定义数据交换格式
- [ ] 概述集成测试需求

### 8.3 运营需求

- [ ] 设置部署频率期望
- [ ] 定义环境需求
- [ ] 确定监控和警报需求
- [ ] 记录支持需求
- [ ] 指定性能监控方法

## 9. 清晰度和沟通

### 9.1 文档质量

- [ ] 文档使用清晰、一致的语言
- [ ] 文档结构良好且组织有序
- [ ] 必要时定义技术术语
- [ ] 包含有帮助的图表/视觉效果
- [ ] 文档适当版本化

### 9.2 利益相关者对齐

- [ ] 确定关键利益相关者
- [ ] 纳入利益相关者意见
- [ ] 解决潜在的分歧领域
- [ ] 建立更新的沟通计划
- [ ] 定义审批流程

## PRD 和史诗验证摘要

[[LLM: 生成最终 PM 检查清单报告

创建包含以下内容的全面验证报告：

1. 执行摘要

   - PRD 完整性（百分比）
   - MVP 范围适当性（太大/刚好/太小）
   - 准备进入架构阶段（准备好/几乎准备好/未准备好）
   - 最关键的差距或关注点

2. 类别分析表
   填写实际表格：

   - 状态：通过（90%+ 完成），部分（60-89%），失败（<60%）
   - 关键问题：阻碍进展的具体问题

3. 按优先级排列的主要问题

   - 阻塞因素：必须在架构师可以继续之前修复
   - 高：应修复以提高质量
   - 中：将提高清晰度
   - 低：可有可无

4. MVP 范围评估

   - 可能被削减的功能以实现真正的 MVP
   - 缺少的基本功能
   - 复杂性问题
   - 时间表现实性

5. 技术准备

   - 技术约束的清晰度
   - 确定的技术风险
   - 需要架构师调查的区域

6. 建议
   - 解决每个阻塞因素的具体行动
   - 提出的改进建议
   - 下一步

在报告后，询问用户是否需要：

- 任何失败部分的详细分析
- 改进特定领域的建议
- 帮助完善 MVP 范围]]

### 类别状态

| 类别                         | 状态 | 关键问题 |
| -------------------------------- | ------ | --------------- |
| 1. 问题定义和背景  | _待定_  |                 |
| 2. MVP 范围定义          | _待定_  |                 |
| 3. 用户体验需求  | _待定_  |                 |
| 4. 功能需求       | _待定_  |                 |
| 5. 非功能需求   | _待定_  |                 |
| 6. 史诗和故事结构        | _待定_  |                 |
| 7. 技术指导            | _待定_  |                 |
| 8. 跨职能需求 | _待定_  |                 |
| 9. 清晰度和沟通       | _待定_  |                 |

### 关键缺陷

（在验证期间填写）

### 建议

（在验证期间填写）

### 最终决定

- **准备好进入架构阶段**：PRD 和史诗是全面的、结构良好的，并准备好进行架构设计。
- **需要完善**：需求文档需要额外工作以解决识别的缺陷。 