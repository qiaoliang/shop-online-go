# 故事完成定义（DoD）检查清单

## 开发代理说明

在将故事标记为“审查”之前，请逐项检查此清单。报告每个项目的状态（例如，[x] 完成，[ ] 未完成，[N/A] 不适用），如有必要，请提供简要评论。

[[LLM: 初始化说明 - 故事 DoD 验证

此检查清单供开发代理在将故事标记为完成之前自我验证其工作。

重要：这是自我评估。诚实地对待实际完成的工作与应该完成的工作。现在识别问题比在审查中发现更好。

执行方法：

1. 系统地逐节进行
2. 将项目标记为 [x] 完成，[ ] 未完成，或 [N/A] 不适用
3. 添加简要评论，解释任何 [ ] 或 [N/A] 项目
4. 具体说明实际实施的内容
5. 标记任何关注或创建的技术债务

目标是高质量交付，而不仅仅是勾选框。]]

## 检查清单项目

1. **需求满足：**

   [[LLM: 具体说明 - 列出每个需求及其是否完成]]

   - [ ] 实施了故事中指定的所有功能需求。
   - [ ] 满足故事中定义的所有验收标准。

2. **编码标准和项目结构：**

   [[LLM: 代码质量对可维护性很重要。仔细检查每个项目]]

   - [ ] 所有新/修改的代码严格遵循《操作指南》。
   - [ ] 所有新/修改的代码与《项目结构》（文件位置、命名等）一致。
   - [ ] 遵循《技术栈》用于使用的技术/版本（如果故事引入或修改技术使用）。
   - [ ] 遵循《API 参考》和《数据模型》（如果故事涉及 API 或数据模型更改）。
   - [ ] 对新/修改代码应用基本的安全最佳实践（例如，输入验证、适当的错误处理、无硬编码秘密）。
   - [ ] 没有引入新的 linter 错误或警告。
   - [ ] 必要时对代码进行良好注释（澄清复杂逻辑，而不是显而易见的陈述）。

3. **测试：**

   [[LLM: 测试证明您的代码有效。诚实对待测试覆盖率]]

   - [ ] 根据故事和《操作指南》测试策略实施所有必需的单元测试。
   - [ ] 根据故事和《操作指南》测试策略实施所有必需的集成测试（如果适用）。
   - [ ] 所有测试（单元、集成、端到端（如果适用））均成功通过。
   - [ ] 测试覆盖率符合项目标准（如果已定义）。

4. **功能和验证：**

   [[LLM: 您是否实际运行和测试了您的代码？具体说明您测试了什么]]

   - [ ] 开发人员已手动验证功能（例如，本地运行应用程序，检查 UI，测试 API 端点）。
   - [ ] 考虑并妥善处理边缘情况和潜在错误条件。

5. **故事管理：**

   [[LLM: 文档有助于下一个开发人员。应该知道什么？]]

   - [ ] 故事文件中的所有任务均标记为完成。
   - [ ] 在开发过程中做出的任何澄清或决策均记录在故事文件中或适当链接。
   - [ ] 故事收尾部分已完成，包含对下一个故事或整体项目的更改或信息的说明，开发过程中主要使用的代理模型，以及任何更改的变更日志已正确更新。

6. **依赖、构建和配置：**

   [[LLM: 构建问题会阻碍每个人。确保一切编译并干净运行]]

   - [ ] 项目成功构建，无错误。
   - [ ] 项目 linting 通过
   - [ ] 添加的任何新依赖项均已在故事需求中预先批准，或在开发过程中由用户明确批准（批准记录在故事文件中）。
   - [ ] 如果添加了新依赖项，则在适当的项目文件中记录（例如，`package.json`，`requirements.txt`）并附有理由。
   - [ ] 新添加和批准的依赖项没有已知的安全漏洞。
   - [ ] 如果故事引入了新的环境变量或配置，则已记录并安全处理。

7. **文档（如果适用）：**

   [[LLM: 良好的文档可以防止未来的混淆。需要解释什么？]]

   - [ ] 完成新公共 API 或复杂逻辑的相关内联代码文档（例如，JSDoc、TSDoc、Python docstrings）。
   - [ ] 如果更改影响用户，则更新用户文档。
   - [ ] 如果进行了重大架构更改，则更新技术文档（例如，README，系统图）。

## 最终确认

[[LLM: 最终 DoD 摘要

完成检查清单后：

1. 总结在此故事中完成的工作
2. 列出标记为 [ ] 未完成的项目并解释
3. 确定任何技术债务或后续工作需求
4. 记录任何挑战或未来故事的学习
5. 确认故事是否真正准备好进行审查

诚实 - 现在标记问题比以后发现更好。]]

- [ ] 我，开发代理，确认已解决上述所有适用项目。 