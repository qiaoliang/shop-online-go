# 产品负责人（PO）主验证检查清单

此检查清单作为一个全面的框架，供产品负责人在开发执行之前验证项目计划。它根据项目类型（绿地与棕地）智能适应，并在适用时包括 UI/UX 考虑。

[[LLM: 初始化说明 - PO 主检查清单

项目类型检测：
首先，通过检查确定项目类型：

1. 这是一个绿地项目（从头开始的新项目）吗？

   - 查找：新项目初始化，没有现有代码库引用
   - 检查：prd.md、architecture.md、新项目设置故事

2. 这是一个棕地项目（增强现有系统）吗？

   - 查找：对现有代码库的引用、增强/修改语言
   - 检查：brownfield-prd.md、brownfield-architecture.md、现有系统分析

3. 项目是否包括 UI/UX 组件？
   - 检查：frontend-architecture.md、UI/UX 规范、设计文件
   - 查找：前端故事、组件规范、用户界面提及

文档要求：
根据项目类型，确保您可以访问：

对于绿地项目：

- prd.md - 产品需求文档
- architecture.md - 系统架构
- frontend-architecture.md - 如果涉及 UI/UX
- 所有史诗和故事定义

对于棕地项目：

- brownfield-prd.md - 棕地增强需求
- brownfield-architecture.md - 增强架构
- 现有项目代码库访问（关键 - 无法在没有此项的情况下继续）
- 当前部署配置和基础设施详细信息
- 数据库模式、API 文档、监控设置

跳过说明：

- 对于绿地项目，跳过标记为 [[BROWNFIELD ONLY]] 的部分
- 对于棕地项目，跳过标记为 [[GREENFIELD ONLY]] 的部分
- 对于仅后端项目，跳过标记为 [[UI/UX ONLY]] 的部分
- 在最终报告中注明所有跳过的部分

验证方法：

1. 深度分析 - 根据文档彻底分析每个项目
2. 基于证据 - 验证时引用具体部分或代码
3. 批判性思维 - 质疑假设并识别差距
4. 风险评估 - 考虑每个决策可能出错的地方

执行模式：
询问用户是否希望逐节完成检查清单：

- 逐节（互动模式） - 审查每个部分，获得确认后再继续
- 一次性（全面模式） - 完成全面分析并在最后呈现报告]]

## 1. 项目设置和初始化

[[LLM: 项目设置是基础。对于绿地项目，确保干净的开始。对于棕地项目，确保与现有系统的安全集成。验证设置是否与项目类型匹配。]]

### 1.1 项目脚手架 [[GREENFIELD ONLY]]

- [ ] 史诗 1 包括项目创建/初始化的明确步骤
- [ ] 如果使用启动模板，包含克隆/设置步骤
- [ ] 如果从头开始构建，定义所有必要的脚手架步骤
- [ ] 包括初始 README 或文档设置
- [ ] 定义存储库设置和初始提交过程

### 1.2 现有系统集成 [[BROWNFIELD ONLY]]

- [ ] 已完成并记录现有项目分析
- [ ] 确定与当前系统的集成点
- [ ] 开发环境保留现有功能
- [ ] 验证现有功能的本地测试方法
- [ ] 为每个集成点定义回滚程序

### 1.3 开发环境

- [ ] 明确定义本地开发环境设置
- [ ] 指定所需工具和版本
- [ ] 包括安装依赖项的步骤
- [ ] 适当处理配置文件
- [ ] 包括开发服务器设置

### 1.4 核心依赖

- [ ] 早期安装所有关键包/库
- [ ] 正确处理包管理
- [ ] 适当定义版本规范
- [ ] 注意依赖冲突或特殊要求
- [ ] [[BROWNFIELD ONLY]] 验证与现有堆栈的版本兼容性

## 2. 基础设施和部署

[[LLM: 基础设施必须在使用前存在。对于棕地项目，必须与现有基础设施集成而不破坏它。]]

### 2.1 数据库和数据存储设置

- [ ] 在任何操作之前进行数据库选择/设置
- [ ] 在数据操作之前创建模式定义
- [ ] 如果适用，定义迁移策略
- [ ] 如果需要，包含种子数据或初始数据设置
- [ ] [[BROWNFIELD ONLY]] 识别并减轻数据库迁移风险
- [ ] [[BROWNFIELD ONLY]] 确保向后兼容性

### 2.2 API 和服务配置

- [ ] 在实现端点之前设置 API 框架
- [ ] 在实现服务之前建立服务架构
- [ ] 在受保护路由之前设置身份验证框架
- [ ] 在使用之前创建中间件和通用实用程序
- [ ] [[BROWNFIELD ONLY]] 维护与现有系统的 API 兼容性
- [ ] [[BROWNFIELD ONLY]] 保留与现有身份验证的集成

### 2.3 部署管道

- [ ] 在部署操作之前建立 CI/CD 管道
- [ ] 在使用前设置基础设施即代码（IaC）
- [ ] 早期定义环境配置
- [ ] 在实施之前定义部署策略
- [ ] [[BROWNFIELD ONLY]] 部署最小化停机时间
- [ ] [[BROWNFIELD ONLY]] 实施蓝绿或金丝雀部署

### 2.4 测试基础设施

- [ ] 在编写测试之前安装测试框架
- [ ] 在测试实施之前设置测试环境
- [ ] 在测试之前定义模拟服务或数据
- [ ] [[BROWNFIELD ONLY]] 回归测试涵盖现有功能
- [ ] [[BROWNFIELD ONLY]] 集成测试验证新旧连接

## 3. 外部依赖和集成

[[LLM: 外部依赖通常会阻碍进展。对于棕地项目，确保新依赖不会与现有依赖冲突。]]

### 3.1 第三方服务

- [ ] 确定所需服务的帐户创建步骤
- [ ] 定义获取 API 密钥的过程
- [ ] 包括安全存储凭据的步骤
- [ ] 考虑回退或离线开发选项
- [ ] [[BROWNFIELD ONLY]] 验证与现有服务的兼容性
- [ ] [[BROWNFIELD ONLY]] 评估对现有集成的影响

### 3.2 外部 API

- [ ] 明确识别与外部 API 的集成点
- [ ] 正确排序与外部服务的身份验证
- [ ] 承认 API 限制或约束
- [ ] 考虑 API 故障的备份策略
- [ ] [[BROWNFIELD ONLY]] 维护现有 API 依赖

### 3.3 基础设施服务

- [ ] 正确排序云资源配置
- [ ] 确定 DNS 或域名注册需求
- [ ] 如果需要，包含电子邮件或消息服务设置
- [ ] 在使用之前设置 CDN 或静态资产托管
- [ ] [[BROWNFIELD ONLY]] 保留现有基础设施服务

## 4. UI/UX 考虑 [[UI/UX ONLY]]

[[LLM: 仅在项目包括用户界面组件时评估此部分。对于仅后端项目，完全跳过。]]

### 4.1 设计系统设置

- [ ] 早期选择和安装 UI 框架和库
- [ ] 建立设计系统或组件库
- [ ] 定义样式方法（CSS 模块、styled-components 等）
- [ ] 建立响应式设计策略
- [ ] 预先定义无障碍性要求

### 4.2 前端基础设施

- [ ] 在开发之前配置前端构建管道
- [ ] 定义资产优化策略
- [ ] 设置前端测试框架
- [ ] 建立组件开发工作流程
- [ ] [[BROWNFIELD ONLY]] 保持与现有系统的 UI 一致性

### 4.3 用户体验流程

- [ ] 在实施之前映射用户旅程
- [ ] 早期定义导航模式
- [ ] 计划错误状态和加载状态
- [ ] 建立表单验证模式
- [ ] [[BROWNFIELD ONLY]] 保留或迁移现有用户工作流程

## 5. 用户/代理责任

[[LLM: 明确的所有权可以防止混淆。确保任务根据只有人类可以做的事情适当分配。]]

### 5.1 用户操作

- [ ] 用户责任仅限于人类任务
- [ ] 将外部服务的帐户创建分配给用户
- [ ] 将购买或支付操作分配给用户
- [ ] 适当分配凭据提供

### 5.2 开发代理操作

- [ ] 将所有与代码相关的任务分配给开发代理
- [ ] 将自动化过程识别为代理责任
- [ ] 正确分配配置管理
- [ ] 将测试和验证分配给适当的代理

## 6. 功能排序和依赖

[[LLM: 依赖关系创建关键路径。对于棕地项目，确保新功能不会破坏现有功能。]]

### 6.1 功能依赖

- [ ] 正确排序依赖于其他功能的功能
- [ ] 在使用之前构建共享组件
- [ ] 用户流程遵循逻辑进程
- [ ] 身份验证功能先于受保护功能
- [ ] [[BROWNFIELD ONLY]] 在整个过程中保留现有功能

### 6.2 技术依赖

- [ ] 在更高级别的服务之前构建低级服务
- [ ] 在使用之前创建库和实用程序
- [ ] 在对其进行操作之前定义数据模型
- [ ] 在客户端消费之前定义 API 端点
- [ ] [[BROWNFIELD ONLY]] 在每个步骤测试集成点

### 6.3 跨史诗依赖

- [ ] 后续史诗建立在早期史诗功能之上
- [ ] 没有史诗需要后续史诗的功能
- [ ] 一致地利用早期史诗的基础设施
- [ ] 保持增量价值交付
- [ ] [[BROWNFIELD ONLY]] 每个史诗保持系统完整性

## 7. 风险管理 [[BROWNFIELD ONLY]]

[[LLM: 此部分对于棕地项目至关重要。悲观地思考可能会破坏的地方。]]

### 7.1 破坏性变更风险

- [ ] 评估破坏现有功能的风险
- [ ] 识别并减轻数据库迁移风险
- [ ] 评估 API 破坏性变更风险
- [ ] 识别性能下降风险
- [ ] 评估安全漏洞风险

### 7.2 回滚策略

- [ ] 为每个故事明确定义回滚程序
- [ ] 实施功能标志策略
- [ ] 更新备份和恢复程序
- [ ] 增强新组件的监控
- [ ] 定义回滚触发器和阈值

### 7.3 用户影响缓解

- [ ] 分析现有用户工作流程的影响
- [ ] 制定用户沟通计划
- [ ] 更新培训材料
- [ ] 支持文档全面
- [ ] 验证用户数据的迁移路径

## 8. MVP 范围对齐

[[LLM: MVP 意味着最小可行产品。对于棕地项目，确保增强功能确实必要。]]

### 8.1 核心目标对齐

- [ ] 解决 PRD 的所有核心目标
- [ ] 功能直接支持 MVP 目标
- [ ] 没有超出 MVP 范围的多余功能
- [ ] 适当优先考虑关键功能
- [ ] [[BROWNFIELD ONLY]] 增强复杂性合理

### 8.2 用户旅程完整性

- [ ] 完全实现所有关键用户旅程
- [ ] 处理边缘情况和错误场景
- [ ] 包括用户体验考虑
- [ ] [[UI/UX ONLY]] 纳入无障碍性要求
- [ ] [[BROWNFIELD ONLY]] 保留或改进现有工作流程

### 8.3 技术需求

- [ ] 解决 PRD 的所有技术约束
- [ ] 纳入非功能需求
- [ ] 架构决策与约束一致
- [ ] 解决性能考虑
- [ ] [[BROWNFIELD ONLY]] 满足兼容性要求

## 9. 文档和交接

[[LLM: 良好的文档可以实现顺利开发。对于棕地项目，集成点的文档至关重要。]]

### 9.1 开发者文档

- [ ] 与实施同时创建 API 文档
- [ ] 设置说明全面
- [ ] 记录架构决策
- [ ] 记录模式和约定
- [ ] [[BROWNFIELD ONLY]] 详细记录集成点

### 9.2 用户文档

- [ ] 如果需要，包含用户指南或帮助文档
- [ ] 考虑错误消息和用户反馈
- [ ] 完全指定入职流程
- [ ] [[BROWNFIELD ONLY]] 记录对现有功能的更改

### 9.3 知识转移

- [ ] [[BROWNFIELD ONLY]] 捕获现有系统知识
- [ ] [[BROWNFIELD ONLY]] 记录集成知识
- [ ] 计划代码审查知识共享
- [ ] 将部署知识转移给运营
- [ ] 保留历史背景

## 10. 后 MVP 考虑

[[LLM: 成功的计划可以防止技术债务。对于棕地项目，确保增强功能不会限制未来增长。]]

### 10.1 未来增强

- [ ] 明确区分 MVP 和未来功能
- [ ] 架构支持计划的增强
- [ ] 记录技术债务考虑
- [ ] 确定可扩展性点
- [ ] [[BROWNFIELD ONLY]] 可重用的集成模式

### 10.2 监控和反馈

- [ ] 如果需要，包含分析或使用跟踪
- [ ] 考虑用户反馈收集
- [ ] 解决监控和警报
- [ ] 纳入性能测量
- [ ] [[BROWNFIELD ONLY]] 保留/增强现有监控

## 验证摘要

[[LLM: 生成最终 PO 验证报告

生成适应项目类型的全面验证报告：

1. 执行摘要

   - 项目类型：[绿地/棕地]，带有 [UI/无 UI]
   - 整体准备情况（百分比）
   - 继续/不继续的建议
   - 关键阻塞问题数量
   - 由于项目类型而跳过的部分

2. 项目特定分析

   对于绿地：

   - 设置完整性
   - 依赖排序
   - MVP 范围适当性
   - 开发时间表可行性

   对于棕地：

   - 集成风险水平（高/中/低）
   - 现有系统影响评估
   - 回滚准备情况
   - 用户中断潜力

3. 风险评估

   - 按严重性排列的前 5 大风险
   - 每个风险的缓解建议
   - 解决问题的时间表影响
   - [BROWNFIELD] 特定集成风险

4. MVP 完整性

   - 核心功能覆盖
   - 缺少的基本功能
   - 识别范围蔓延
   - 真正的 MVP 与过度工程

5. 实施准备

   - 开发者清晰度评分（1-10）
   - 模糊需求数量
   - 缺少的技术细节
   - [BROWNFIELD] 集成点清晰度

6. 建议

   - 开发前必须修复
   - 应修复以提高质量
   - 考虑改进
   - 后 MVP 推迟

7. [BROWNFIELD ONLY] 集成信心
   - 保留现有功能的信心
   - 回滚程序完整性
   - 集成点的监控覆盖
   - 支持团队准备情况

在报告后，询问用户是否需要：

- 任何失败部分的详细分析
- 特定故事重新排序建议
- 风险缓解策略
- [BROWNFIELD] 集成风险深入分析]]

### 类别状态

| 类别                                | 状态 | 关键问题 |
| --------------------------------------- | ------ | --------------- |
| 1. 项目设置和初始化       | _待定_  |                 |
| 2. 基础设施和部署          | _待定_  |                 |
| 3. 外部依赖和集成 | _待定_  |                 |
| 4. UI/UX 考虑                 | _待定_  |                 |
| 5. 用户/代理责任            | _待定_  |                 |
| 6. 功能排序和依赖    | _待定_  |                 |
| 7. 风险管理（棕地）         | _待定_  |                 |
| 8. MVP 范围对齐                  | _待定_  |                 |
| 9. 文档和交接              | _待定_  |                 |
| 10. 后 MVP 考虑             | _待定_  |                 |

### 关键缺陷

（在验证期间填写）

### 建议

（在验证期间填写）

### 最终决定

- **批准**：计划是全面的、正确排序的，并准备好实施。
- **有条件**：计划需要在继续之前进行具体调整。
- **拒绝**：计划需要重大修订以解决关键缺陷。 